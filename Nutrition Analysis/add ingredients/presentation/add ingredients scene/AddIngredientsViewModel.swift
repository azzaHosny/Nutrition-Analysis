//
//  AddIngredientsViewModel.swift
//  Nutrition Analysis
//
//  Created by SmartPan on 6/25/21.
//  Copyright (c) azah mahgoub. All rights reserved.
//
//  This file was generated by the Xcode Templates so
//  you can apply clean architecture with MVVMC to your iOS and Mac projects.

import Foundation
import RxSwift

struct AddIngredientsUIViewModel {
    let weight: String
    let Quantity: String
    let Unit: String
    let Food: String
    let Calories: String
}

enum AddIngredientsViewModelStatus {
    case sucess(AddIngredientsUIViewModel)
    case fail
    case loading
}

class AddIngredientsViewModel {
    
    var cordinator: AddIngredientsCordinator

    let disposBag = DisposeBag()
    let behavioralSbj = BehaviorSubject<AddIngredientsViewModelStatus>(value: .loading)
    
    init(cordinator: AddIngredientsCordinator){
        self.cordinator = cordinator
    }
    
    func getIngredientList(ingredientText: String) {
        var ingredientsList = ingredientText.components(separatedBy: "\n")
        ingredientsList.removeAll(where: {$0.trimmingCharacters(in: .whitespacesAndNewlines) == ""})
        if let first = ingredientsList.first {
            getNuitrients(ingr: first)
        }
    }
    
   private func getNuitrients(ingr: String) {
      let params = GetNutritionRequestModel(app_id: "9a6d4460", app_key: "cd91b67f2ab0fa7b016f77b81f10219c", nutrition_type: "logging", ingr: ingr)
        GetNutritionDataUseCase.build(param: params).subscribe( onNext: { [weak self] result in
            guard let selfObjct = self else { return }
            selfObjct.behavioralSbj.onNext(result)
        }, onError: { [weak self] error in
            guard let selfObjct = self else { return }
            selfObjct.behavioralSbj.onNext(.fail)
        }).disposed(by: disposBag)
    }
    func passDatasourceToCordinator(datasource: AddIngredientsUIViewModel) {
        cordinator.routToIngredientList(ingredientList: [datasource])
    }
}

