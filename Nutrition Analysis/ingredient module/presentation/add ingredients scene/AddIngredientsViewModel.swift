//
//  AddIngredientsViewModel.swift
//  Nutrition Analysis
//
//  Created by azah on 6/25/21.
//  Copyright (c) azah mahgoub. All rights reserved.
//
//  This file was generated by the Xcode Templates so
//  you can apply clean architecture with MVVMC to your iOS and Mac projects.

import Foundation
import RxSwift

struct AddIngredientsUIViewModel {
    let weight: String
    let ingredient: String
    let calories: String
}

enum AddIngredientsViewModelStatus {
    case sucess([AddIngredientsUIViewModel])
    case fail
    case loading
}

class AddIngredientsViewModel {
    
    let nutritionRepo: NutritionRepo
    var cordinator: AddIngredientsCordinator
    let getNutritionDataUseCase: GetNutritionDataUseCaseProtocol
    let disposBag = DisposeBag()
    let behavioralSbj = BehaviorSubject<AddIngredientsViewModelStatus>(value: .loading)
    
    init(cordinator: AddIngredientsCordinator, getNutritionDataUseCase: GetNutritionDataUseCaseProtocol, nutritionRepo: NutritionRepo){
        self.getNutritionDataUseCase = getNutritionDataUseCase
        self.cordinator = cordinator
        self.nutritionRepo = nutritionRepo
    }
    
    func getIngredientList(ingredientText: String) {
        var ingredientsList = ingredientText.components(separatedBy: "\n")
        ingredientsList.removeAll(where: {$0.trimmingCharacters(in: .whitespacesAndNewlines) == ""})
        if ingredientsList.count > 0 {
            getNuitrients(ingr: ingredientsList)
        }
    }
    
    private func getNuitrients(ingr: [String]) {
        let ovbservables = ingr.map {
            getNutritionDataUseCase.build(param: GetNutritionRequestModel(app_id: AppConstants.app_id.rawValue, app_key: AppConstants.app_key.rawValue, nutrition_type: AppConstants.nutrition_type.rawValue, ingr: $0), nutritionRepo: nutritionRepo)
        }
        Observable.zip(ovbservables).subscribe(
            onNext: { [weak self] result in
                guard let selfObjct = self else { return }
                selfObjct.behavioralSbj.onNext(.sucess(result))
            }
            , onError: { [weak self] error in
                guard let selfObjct = self else { return }
                selfObjct.behavioralSbj.onNext(.fail)
            }
            , onCompleted: {
            }, onDisposed: nil).disposed(by: disposBag)
    }
    
    func passDatasourceToCordinator(datasource: [AddIngredientsUIViewModel]) {
        cordinator.routToIngredientList(ingredientList: datasource)
    }
}

